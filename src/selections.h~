void mutau_analyzer::selections(float weight, int shift, string uncObject)
{
	check_unc = false; // set true for printing unc pt, values

	double event_weight = weight;
	TLorentzVector metP4, event_met_p4;
	if (shift > 0)
		unc_shift = "up";
	else if (shift < 0)
		unc_shift = "down";
	else
		unc_shift = "nominal";
	shift_index = shift;
	selected_systematic = uncObject;
	// cout<<" selected_systematic = "<< selected_systematic << " shift = "<< shift<<endl;
	std::vector<int> event_mu, event_tau;
	event_mu.clear();
	event_tau.clear();
	muCand.clear();
	tauCand.clear();
	aisrtauCand.clear();
	jetCand.clear();
	for (int i = 0; i < nJet; i++)
		jetPt->at(i) = orginal_jetPt[i];

	if (uncObject == "tauES")
	{
		/// apply +sigma shift to tau pt, everything else default
		muCand = simple_mu_cand(20, 2.4, 0);
		tauCand = getTauCand(30.0, 2.3, shift);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
	}
	else if (uncObject == "JES")
	{
		/// apply +sigma shift to Jet, pfMET_T1JESUp , everything else default
		muCand = simple_mu_cand(20, 2.4, 0); ///// ele selected
		tauCand = getTauCand(30.0, 2.3, 0);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
		if (unc_shift == "up")
		{
			for (int i = 0; i < nJet; i++)
				jetPt->at(i) = orginal_jetPt[i] * (1 + 1 * jetJECUnc->at(i));
		}
		else if (unc_shift == "down")
		{
			for (int i = 0; i < nJet; i++)
				jetPt->at(i) = orginal_jetPt[i] * (1 - 1 * jetJECUnc->at(i));
		}
	}
	else if (uncObject == "JER")
	{
		/// apply +sigma shift to Jet, pfMET_T1JERUp, everything else default
		muCand = simple_mu_cand(20, 2.1, 0); ///// ele selected
		tauCand = getTauCand(30.0, 2.3, 0);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
		if (unc_shift == "up")
		{
			for (int i = 0; i < nJet; i++)
				jetPt->at(i) = jetRawPt->at(i) * jetP4SmearUp->at(i);
			// metP4.SetPtEtaPhiE(pfMET_T1JERUp, 0, pfMETPhi, pfMET_T1JERUp);
			// metP4.SetPtEtaPhiE(pfMET ,0,pfMETPhi,pfMET);
		}
		else if (unc_shift == "down")
		{
			for (int i = 0; i < nJet; i++)
				jetPt->at(i) = jetRawPt->at(i) * jetP4SmearDo->at(i);
			// metP4.SetPtEtaPhiE(pfMET_T1JERDo, 0, pfMETPhi, pfMET_T1JERDo);
			// metP4.SetPtEtaPhiE(pfMET ,0,pfMETPhi,pfMET);
		}
	}
	else if (uncObject == "metresponse")
	{
		/// apply +sigma shift to met, everything else default
		muCand = simple_mu_cand(20, 2.1, 0); ///// ele selected
		tauCand = getTauCand(30.0, 2.3, 0);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
		/* if (muCand.size()>0 && tauCand.size()>0){ */
		/*   jetCand=getJetCand(muCand[0], tauCand[0]); */
		/*   my_njets=jetCand.size(); */
		/*   metP4 = metSysUnc("response"); */
		/* } */
	}
	else if (uncObject == "metresolution")
	{
		/// apply +sigma shift to met, everything else default
		muCand = simple_mu_cand(20, 2.1, 0); ///// ele selected
		tauCand = getTauCand(30.0, 2.3, 0);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
		/* if(muCand.size()>0 && tauCand.size()>0) */
		/*   { */
		/* 	jetCand=getJetCand(muCand[0], tauCand[0]); */
		/* 	my_njets=jetCand.size(); */
		/* 	metP4 = metSysUnc("resolution"); */
		/*   } */
	}
	else if (uncObject == "metunclustered")
	{
		/// apply +sigma shift to met, everything else default
		muCand = simple_mu_cand(20, 2.1, 0); ///// ele selected
		tauCand = getTauCand(30.0, 2.3, 0);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
		/* if (muCand.size()>0 && tauCand.size()>0){ */
		/*   jetCand=getJetCand(muCand[0], tauCand[0]); */
		/*   my_njets=jetCand.size(); */
		/*   metP4 = metClusteredUnc(); */
		/* } */
	}
	else
	{
		// Setting nominal values
		muCand = simple_mu_cand(20, 2.1, 0); ///// ele selected
		tauCand = getTauCand(30.0, 2.3, 0);
		metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
	}

	event_mu = muCand;
	event_tau = tauCand;
	event_met_p4 = metP4;
	muCand = simple_mu_cand(20, 2.4, 0); ///// ele selected
	tauCand = simple_tau_cand(30.0, 2.3, 0);
	metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);
	// muCand = simple_mu_cand(20,2.1, shift);
	int mu_index = -1;
	int tau_index = -1;
						

	if (muCand.size() > 0 && tauCand.size() > 0)
	{
		make_iso_plot = true;
		pair<int, int> selected_indices = get_index(muCand, tauCand);
		make_iso_plot = false;
		mu_index = selected_indices.first;
		tau_index = selected_indices.second;
		if (mu_index >= 0 && tau_index >= 0  && (if_DY_Genmatching(mu_index, tau_index) == 1 || if_DY_Genmatching(mu_index, tau_index) == 2))
		{
			setMyEleTau(mu_index, tau_index, metP4, shift);
			applySf = 1.0;
			if (is_MC)
				applySf = getScaleFactors(my_muP4.Pt(),
										  my_tauP4.Pt(),
										  my_muP4.Eta(),
										  my_tauP4.Eta(),
										  tau_DecayMode->at(TauIndex),
										  my_genmatching_l2,
										  false /// this is set to true for fake bakground
				);

			// if(debug)cout<<" sf : "<<getScaleFactors( EleIndex[0] , TauIndex[0] , false , is_MC , debug ) <<endl;
			// cout<<" sf : "<< applySf <<endl;
			event_weight = event_weight * applySf;
			if (shift == 0)
				fillHist("5_dyll", MuIndex, TauIndex, false, event_weight);
			double mvis = (my_muP4 + my_tauP4).M();
			double higgsPt = (my_muP4 + my_tauP4).Pt();
			double tot_tr_mass = (my_muP4 + my_tauP4 + my_metP4).M();
			float deltaR = my_muP4.DeltaR(my_tauP4);
			if (higgsPt > 65)
			{
				if (shift == 0)
					fillHist("7_dyll", MuIndex, TauIndex, false, event_weight);
				if (mvis < 125)
				{
					if (shift == 0)
						fillHist("8_dyll", MuIndex, TauIndex, false, event_weight);
					if (my_metP4.Pt() > 105)
					{
						stage = "9_dyll";
						if (unc_shift == "nominal")
							save_nom();

						if (shift == 0)
							fillHist("9_dyll", MuIndex, TauIndex, false, event_weight);
						else
							fillUncPlots("9_dyll", MuIndex, TauIndex, false, event_weight, shift);
						if (deltaR < 2.0)
						{
							if (shift == 0)
								fillHist("9b_dyll", MuIndex, TauIndex, false, event_weight);
							else
								fillUncPlots("9b_dyll", MuIndex, TauIndex, false, event_weight, shift);
							if (tot_tr_mass > 260)
							{
								if (shift == 0)
									fillHist("9d_dyll", MuIndex, TauIndex, false, event_weight);
								else
									fillUncPlots("9d_dyll", MuIndex, TauIndex, false, event_weight, shift);
							}
						}
					}
				}
			}
		}
	}
	////// signal region -  isolated begin
	if (is_MC)
		event_weight = weight;
	else
		event_weight = 1.0;
	muCand = event_mu;
	tauCand = event_tau;

	muCand = simple_mu_cand(20, 2.4, 0); ///// ele selected
	tauCand = simple_tau_cand(30.0, 2.3, 0);
	metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);

	plot_boosted = false;
	event_met_p4 = metP4;
	// muCand.clear();  tauCand.clear();
	// muCand = simple_mu_cand(20,2.4, shift);  ///// muons selected
	mu_index = -1;
	tau_index = -1;
	if (muCand.size() > 0 && tauCand.size() > 0)
	{
		make_iso_plot = true;
		pair<int, int> selected_indices = get_index(muCand, tauCand);
		make_iso_plot = false;
		mu_index = selected_indices.first;
		tau_index = selected_indices.second;
		if (mu_index >= 0 && tau_index >= 0)
		{
			setMyEleTau(mu_index, tau_index, metP4, shift);
			applySf = 1.0;
			if (is_MC)
				applySf = getScaleFactors(my_muP4.Pt(),
										  my_tauP4.Pt(),
										  my_muP4.Eta(),
										  my_tauP4.Eta(),
										  tau_DecayMode->at(TauIndex),
										  my_genmatching_l2,
										  false /// this is set to true for fake bakground
				);

			// if(debug)cout<<" sf : "<<getScaleFactors( EleIndex[0] , TauIndex[0] , false , is_MC , debug ) <<endl;
			// cout<<" sf : "<< applySf <<endl;
			event_weight = event_weight * applySf;
			if (shift == 0)
				fillHist("5", MuIndex, TauIndex, false, event_weight);
			double mvis = (my_muP4 + my_tauP4).M();
			double higgsPt = (my_muP4 + my_tauP4).Pt();
			double tot_tr_mass = (my_muP4 + my_tauP4 + my_metP4).M();
			float deltaR = my_muP4.DeltaR(my_tauP4);
			if (higgsPt > 65)
			{
				if (shift == 0)
					fillHist("7", MuIndex, TauIndex, false, event_weight);
				if (mvis < 125)
				{
					if (shift == 0)
						fillHist("8", MuIndex, TauIndex, false, event_weight);
					if (my_metP4.Pt() > 105)
					{
						stage = "9";
						if (unc_shift == "nominal")
							save_nom();

						if (shift == 0)
							fillHist("9", MuIndex, TauIndex, false, event_weight);
						else
							fillUncPlots("9", MuIndex, TauIndex, false, event_weight, shift);
						if (deltaR < 2.0)
						{
							if (shift == 0)
								fillHist("9b", MuIndex, TauIndex, false, event_weight);
							else
								fillUncPlots("9b", MuIndex, TauIndex, false, event_weight, shift);
							if (tot_tr_mass > 260)
							{
								if (shift == 0)
									fillHist("9d", MuIndex, TauIndex, false, event_weight);
								else
									fillUncPlots("9d", MuIndex, TauIndex, false, event_weight, shift);
							}
						}
					}
				}
			}
		}
	}

	////// fake background region - antiisolated begin
	if (is_MC)
		event_weight = weight;
	else
		event_weight = 1.0;
	muCand.clear();
	tauCand.clear();
	aisrtauCand.clear();
	jetCand.clear();

	for (int i = 0; i < nJet; i++)
		jetPt->at(i) = orginal_jetPt[i];

	// Setting nominal values
	muCand = simple_mu_cand(20, 2.4, 0); ///// ele selected
	tauCand = getAISRTauCand(30.0, 2.3, 0);
	metP4.SetPtEtaPhiE(pfMET, 0, pfMETPhi, pfMET);

	if (shift != 0 && selected_systematic != "jetFakes")
		return;
	// cout<<"entering fake rate region"<<endl;
	mu_index = -1;
	tau_index = -1;
	if (muCand.size() > 0 && tauCand.size() > 0)
	{
		pair<int, int> selected_indices = get_index_2(muCand, tauCand);
		mu_index = selected_indices.first;
		tau_index = selected_indices.second;
		if (mu_index >= 0 && tau_index >= 0)
		{
			setMyEleTau(mu_index, tau_index, metP4, shift);
			float deltaR = my_muP4.DeltaR(my_tauP4);
			double mt = TMass_F(my_muP4.Pt(), my_muP4.Phi(), my_metP4.Pt(), my_metP4.Phi());
			double mvis = (my_muP4 + my_tauP4).M();
			double higgsPt = (my_muP4 + my_tauP4).Pt();
			double frac_tt = 0.01;
			double frac_qcd = 0.24;
			double frac_w = 0.75;
			int category = eventCategory(MuIndex, TauIndex, higgsPt);
			getFractions(category, mvis, frac_qcd, frac_w, frac_tt); /// this assigns right values for qcd, w and tt fractions
			bool xtrg = false;
			if (passCrossTrigger && my_muP4.Pt() <= 25.0)
				xtrg = true;
			else if (my_muP4.Pt() > 28.0)
				xtrg = false;
			double newFF = FF_weights_withlpt.get_ff(my_tauP4.Pt(), mt, mvis, 0, my_muP4.Pt(), my_metP4.Pt(), my_njets, xtrg, frac_tt, frac_qcd, frac_w, TString(" "));

			event_weight = event_weight * newFF;
			nGoodTauPassed_fr += event_weight;

			applySf = 1.0;
			if (is_MC)
				applySf = getScaleFactors(my_muP4.Pt(),
										  my_tauP4.Pt(),
										  my_muP4.Eta(),
										  my_tauP4.Eta(),
										  tau_DecayMode->at(TauIndex),
										  my_genmatching_l2,
										  true /// this is set to true for fake bakground
				);

			// if(debug)cout<<" sf : "<<getScaleFactors( EleIndex[0] , TauIndex[0] , false , is_MC , debug ) <<endl;
			// cout<<" sf : "<< applySf <<endl;
			event_weight = event_weight * applySf;
			if (shift == 0)
				fillHist("5_fr", MuIndex, TauIndex, true, event_weight);
			// higgs pt > 65,  visible mass < 125, met > 105
			// double mvis = (my_muP4 + my_tauP4).M();
			// double higgsPt = (my_muP4 + my_tauP4).Pt();
			double tot_tr_mass = (my_muP4 + my_tauP4 + my_metP4).M();
			if (higgsPt > 65)
			{
				if (shift == 0)
					fillHist("7_fr", MuIndex, TauIndex, true, event_weight);
				if (mvis < 125)
				{
					if (shift == 0)
						fillHist("8_fr", MuIndex, TauIndex, true, event_weight);
					if (my_metP4.Pt() > 105)
					{
						if (shift == 0)
							fillHist("9_fr", MuIndex, TauIndex, true, event_weight);
						else
							fillUncPlots("9_fr", MuIndex, TauIndex, true, event_weight, shift);
						if (deltaR < 2.0)
						{
							if (shift == 0)
								fillHist("9b_fr", MuIndex, TauIndex, true, event_weight);
							else
								fillUncPlots("9b_fr", MuIndex, TauIndex, true, event_weight, shift);
							if (tot_tr_mass > 260)
							{
								if (shift == 0)
									fillHist("9d_fr", MuIndex, TauIndex, true, event_weight);
								else
									fillUncPlots("9d_fr", MuIndex, TauIndex, true, event_weight, shift);
							}
						}
					}
				}
			}
		}
	}
}

////// fake rate anti isolated region end
